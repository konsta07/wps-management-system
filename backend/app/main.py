# backend/app/main.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from fastapi import FastAPI, Depends, HTTPException, status, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import List
import uvicorn
import os
import uuid
from pathlib import Path
import shutil
from datetime import date, timedelta

from .database import get_db, create_tables
from .models import Company as CompanyModel, WPS as WPSModel, WPQR as WPQRModel
from .models.welder import Welder as WelderModel, WelderCertificate as WelderCertificateModel
from .schemas import (
    Company, CompanyCreate, CompanyUpdate,
    WPS, WPSCreate, WPSUpdate,
    WPQR, WPQRCreate, WPQRUpdate
)
from .schemas.welder import (
    Welder, WelderCreate, WelderUpdate,
    WelderCertificate, WelderCertificateCreate, WelderCertificateUpdate,
    ExpiringCertificatesResponse, ExpiringCertificate
)
# ‚úÖ –°–û–ó–î–ê–ï–ú APP –°–ù–ê–ß–ê–õ–ê
app = FastAPI(
    title="WPS Management System",
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —Å–≤–∞—Ä–∫–∏ (WPS) –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (WPQR)",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# ‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
STATIC_DIR = Path("static")
LOGOS_DIR = STATIC_DIR / "logos"
LOGOS_DIR.mkdir(parents=True, exist_ok=True)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")

# ‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï PDF –†–û–£–¢–ï–†–ê –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø APP
try:
    from .services.pdf_generator import pdf_router
    app.include_router(pdf_router)
    print("‚úÖ PDF router –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ö†Ô∏è PDF router –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω: {e}")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PDF router: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        create_tables()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:8000")
        print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")

# =====================================
# –ë–ê–ó–û–í–´–ï ENDPOINTS
# =====================================

@app.get("/")
async def root():
    return {
        "message": "WPS Management System API", 
        "version": "1.0.0",
        "docs": "/docs",
        "status": "Full CRUD operations available for Companies, WPS, and WPQR",
        "available_endpoints": {
            "companies": {
                "list": "GET /companies",
                "create": "POST /companies", 
                "get": "GET /companies/{id}",
                "update": "PUT /companies/{id}",
                "delete": "DELETE /companies/{id}",
                "search": "GET /companies/search/{term}",
                "filter": "GET /companies/filter",
                "create_sample": "POST /companies/create-sample"
            },
            "wps": {
                "list": "GET /wps",
                "create": "POST /wps",
                "get": "GET /wps/{id}",
                "update": "PUT /wps/{id}",
                "delete": "DELETE /wps/{id}",
                "by_company": "GET /wps/by-company/{company_id}",
                "search": "GET /wps/search/{term}",
                "create_sample": "POST /wps/create-sample"
            },
            "wpqr": {
                "list": "GET /wpqr",
                "create": "POST /wpqr",
                "get": "GET /wpqr/{id}",
                "update": "PUT /wpqr/{id}",
                "delete": "DELETE /wpqr/{id}",
                "by_company": "GET /wpqr/by-company/{company_id}",
                "by_wps": "GET /wpqr/by-wps/{wps_id}",
                "search": "GET /wpqr/search/{term}",
                "create_sample": "POST /wpqr/create-sample"
            },
            "welders": {
                "list": "GET /welders",
                "create": "POST /welders",
                "get": "GET /welders/{id}",
                "update": "PUT /welders/{id}",
                "delete": "DELETE /welders/{id}",
                "by_company": "GET /welders/by-company/{company_id}",
                "create_sample": "POST /welders/create-sample"
            },
            "certificates": {
                "list": "GET /certificates",
                "create": "POST /certificates",
                "get": "GET /certificates/{id}",
                "update": "PUT /certificates/{id}",
                "delete": "DELETE /certificates/{id}",
                "upload_file": "POST /certificates/{id}/upload-file",
                "expiring": "GET /companies/{id}/expiring-certificates"
            },
            "pdf": {
                "wps_pdf": "GET /api/pdf/wps/{wps_id}",
                "wpqr_pdf_advanced": "GET /api/pdf/wpqr/{wpqr_id}",
                "wpqr_pdf_simple": "GET /api/pdf/wpqr/{wpqr_id}?simple=true"
            },
            "system": {
                "health": "GET /health",
                "test_db": "GET /test-db"
            }
        }
    }

@app.get("/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        result = db.execute(text("SELECT 1")).scalar()
        return {"status": "healthy", "database": "connected", "test_query": result}
    except Exception as e:
        return {"status": "error", "database": "disconnected", "error": str(e)}

@app.get("/test-db")
async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from .database import engine
        
        with engine.connect() as conn:
            result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
            tables = [row[0] for row in result.fetchall()]
            
        return {
            "status": "success",
            "database_file": "wps_system.db",
            "tables_created": tables,
            "tables_count": len(tables)
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".gif", ".webp"}
MAX_FILE_SIZE = 5 * 1024 * 1024  # 5MB

def validate_image_file(file: UploadFile) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    file_ext = Path(file.filename).suffix.lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø
    if not file.content_type.startswith("image/"):
        raise HTTPException(
            status_code=400,
            detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"
        )

def save_logo_file(file: UploadFile, company_id: int) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç URL"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_ext = Path(file.filename).suffix.lower()
    filename = f"company_{company_id}_{uuid.uuid4()}{file_ext}"
    file_path = LOGOS_DIR / filename
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
        )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    return f"/static/logos/{filename}"

def delete_old_logo(logo_url: str) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ—Ç–∏–ø–∞"""
    if logo_url and logo_url.startswith("/static/logos/"):
        old_file_path = Path("static") / logo_url.replace("/static/", "")
        if old_file_path.exists():
            try:
                old_file_path.unlink()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø {old_file_path}: {e}")

@app.post("/companies/{company_id}/upload-logo")
async def upload_company_logo(
    company_id: int,
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
    validate_image_file(file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file.file.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    file_size = file.file.tell()
    file.file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
    
    if file_size > MAX_FILE_SIZE:
        raise HTTPException(
            status_code=400,
            detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB"
        )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ª–æ–≥–æ—Ç–∏–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    if company.logo_url:
        delete_old_logo(company.logo_url)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    logo_url = save_logo_file(file, company_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    company.logo_url = logo_url
    db.commit()
    db.refresh(company)
    
    return {
        "message": "–õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        "logo_url": logo_url,
        "filename": file.filename,
        "file_size": file_size,
        "company": {
            "id": company.id,
            "name": company.name,
            "logo_url": company.logo_url
        }
    }

@app.delete("/companies/{company_id}/delete-logo")
def delete_company_logo(company_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    if not company.logo_url:
        raise HTTPException(status_code=404, detail="–£ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞")
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    delete_old_logo(company.logo_url)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    old_logo_url = company.logo_url
    company.logo_url = None
    db.commit()
    
    return {
        "message": "–õ–æ–≥–æ—Ç–∏–ø —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        "deleted_logo_url": old_logo_url,
        "company": {
            "id": company.id,
            "name": company.name,
            "logo_url": company.logo_url
        }
    }

@app.get("/companies/{company_id}/logo")
def get_company_logo_info(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–æ—Ç–∏–ø–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    if not company.logo_url:
        return {
            "has_logo": False,
            "logo_url": None,
            "company_name": company.name
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    logo_path = Path("static") / company.logo_url.replace("/static/", "")
    file_exists = logo_path.exists()
    
    return {
        "has_logo": True,
        "logo_url": company.logo_url,
        "file_exists": file_exists,
        "company_name": company.name,
        "file_path": str(logo_path) if file_exists else None
    }
# =====================================
# COMPANIES CRUD ENDPOINTS
# =====================================

@app.get("/companies", response_model=List[Company])
def get_companies(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    companies = db.query(CompanyModel).offset(skip).limit(limit).all()
    return companies

@app.get("/companies/{company_id}", response_model=Company)
def get_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    return company

@app.post("/companies", response_model=Company, status_code=status.HTTP_201_CREATED)
def create_company(company: CompanyCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é"""
    existing_company = db.query(CompanyModel).filter(CompanyModel.code == company.code).first()
    if existing_company:
        raise HTTPException(
            status_code=400, 
            detail=f"Company with code '{company.code}' already exists"
        )
    
    db_company = CompanyModel(**company.dict())
    db.add(db_company)
    db.commit()
    db.refresh(db_company)
    return db_company

@app.put("/companies/{company_id}", response_model=Company)
def update_company(company_id: int, company_update: CompanyUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    
    update_data = company_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(company, field, value)
    
    db.commit()
    db.refresh(company)
    return company

@app.delete("/companies/{company_id}")
def delete_company(company_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    
    db.delete(company)
    db.commit()
    return {"message": f"Company '{company.name}' deleted successfully", "deleted_id": company_id}

@app.get("/companies/search/{search_term}")
def search_companies(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)"""
    companies = db.query(CompanyModel).filter(
        CompanyModel.name.ilike(f"%{search_term}%") | 
        CompanyModel.code.ilike(f"%{search_term}%")
    ).all()
    
    return {
        "search_term": search_term,
        "search_mode": "case_insensitive",
        "found_count": len(companies),
        "companies": [
            {
                "id": c.id, 
                "name": c.name, 
                "code": c.code, 
                "email": c.email
            } for c in companies
        ]
    }

@app.get("/companies/filter")
def filter_companies(
    name: str = None, 
    code: str = None, 
    db: Session = Depends(get_db)
):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    query = db.query(CompanyModel)
    
    filters_applied = []
    
    if name:
        query = query.filter(CompanyModel.name.ilike(f"%{name}%"))
        filters_applied.append(f"name contains '{name}'")
        
    if code:
        query = query.filter(CompanyModel.code.ilike(f"%{code}%"))
        filters_applied.append(f"code contains '{code}'")
    
    companies = query.all()
    
    return {
        "filters_applied": filters_applied,
        "found_count": len(companies),
        "companies": [
            {
                "id": c.id,
                "name": c.name, 
                "code": c.code,
                "certification_body": c.certification_body
            } for c in companies
        ]
    }

# =====================================
# WPS CRUD ENDPOINTS  
# =====================================

@app.get("/wps", response_model=List[WPS])
def get_wps_list(
    company_id: int = None, 
    status: str = None,
    welding_process: str = None,
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ WPS —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WPSModel)
    
    if company_id:
        query = query.filter(WPSModel.company_id == company_id)
    if status:
        query = query.filter(WPSModel.status.ilike(f"%{status}%"))
    if welding_process:
        query = query.filter(WPSModel.welding_process.ilike(f"%{welding_process}%"))
    
    wps_list = query.offset(skip).limit(limit).all()
    return wps_list

@app.get("/wps/{wps_id}", response_model=WPS)
def get_wps(wps_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å WPS –ø–æ ID"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    return wps

@app.post("/wps", response_model=WPS, status_code=status.HTTP_201_CREATED)
def create_wps(wps: WPSCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π WPS"""
    company = db.query(CompanyModel).filter(CompanyModel.id == wps.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    existing_wps = db.query(WPSModel).filter(
        WPSModel.company_id == wps.company_id,
        WPSModel.wps_number == wps.wps_number
    ).first()
    if existing_wps:
        raise HTTPException(
            status_code=400, 
            detail=f"WPS number '{wps.wps_number}' already exists for company '{company.name}'"
        )
    
    db_wps = WPSModel(**wps.dict())
    db.add(db_wps)
    db.commit()
    db.refresh(db_wps)
    return db_wps

@app.put("/wps/{wps_id}", response_model=WPS)
def update_wps(wps_id: int, wps_update: WPSUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    update_data = wps_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(wps, field, value)
    
    db.commit()
    db.refresh(wps)
    return wps

@app.delete("/wps/{wps_id}")
def delete_wps(wps_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    wps_number = wps.wps_number
    db.delete(wps)
    db.commit()
    return {"message": f"WPS '{wps_number}' deleted successfully", "deleted_id": wps_id}

@app.get("/wps/by-company/{company_id}")
def get_wps_by_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPS –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    wps_list = db.query(WPSModel).filter(WPSModel.company_id == company_id).all()
    
    return {
        "company": {"id": company.id, "name": company.name, "code": company.code},
        "wps_count": len(wps_list),
        "wps_list": [
            {
                "id": w.id,
                "wps_number": w.wps_number,
                "title": w.title,
                "welding_process": w.welding_process,
                "status": w.status,
                "revision": w.revision
            } for w in wps_list
        ]
    }

@app.get("/wps/search/{search_term}")
def search_wps(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ WPS –ø–æ –Ω–æ–º–µ—Ä—É, –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—É —Å–≤–∞—Ä–∫–∏"""
    wps_list = db.query(WPSModel).filter(
        WPSModel.wps_number.ilike(f"%{search_term}%") |
        WPSModel.title.ilike(f"%{search_term}%") |
        WPSModel.welding_process.ilike(f"%{search_term}%") |
        WPSModel.base_material_spec.ilike(f"%{search_term}%")
    ).all()
    
    return {
        "search_term": search_term,
        "found_count": len(wps_list),
        "wps_list": [
            {
                "id": w.id,
                "wps_number": w.wps_number,
                "title": w.title,
                "welding_process": w.welding_process,
                "base_material": w.base_material_spec,
                "status": w.status,
                "company_id": w.company_id
            } for w in wps_list
        ]
    }

# =====================================
# WPQR CRUD ENDPOINTS
# =====================================

@app.get("/wpqr", response_model=List[WPQR])
def get_wpqr_list(
    company_id: int = None, 
    wps_id: int = None,
    overall_result: str = None,
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ WPQR —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WPQRModel)
    
    if company_id:
        query = query.filter(WPQRModel.company_id == company_id)
    if wps_id:
        query = query.filter(WPQRModel.wps_id == wps_id)
    if overall_result:
        query = query.filter(WPQRModel.overall_result.ilike(f"%{overall_result}%"))
    
    wpqr_list = query.offset(skip).limit(limit).all()
    return wpqr_list

@app.get("/wpqr/{wpqr_id}", response_model=WPQR)
def get_wpqr(wpqr_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å WPQR –ø–æ ID"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    return wpqr

@app.post("/wpqr", response_model=WPQR, status_code=status.HTTP_201_CREATED)
def create_wpqr(wpqr: WPQRCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π WPQR"""
    company = db.query(CompanyModel).filter(CompanyModel.id == wpqr.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    if wpqr.wps_id:
        wps = db.query(WPSModel).filter(WPSModel.id == wpqr.wps_id).first()
        if not wps:
            raise HTTPException(status_code=404, detail="WPS not found")
    
    existing_wpqr = db.query(WPQRModel).filter(
        WPQRModel.company_id == wpqr.company_id,
        WPQRModel.wpqr_number == wpqr.wpqr_number
    ).first()
    if existing_wpqr:
        raise HTTPException(
            status_code=400, 
            detail=f"WPQR number '{wpqr.wpqr_number}' already exists for company '{company.name}'"
        )
    
    db_wpqr = WPQRModel(**wpqr.dict())
    db.add(db_wpqr)
    db.commit()
    db.refresh(db_wpqr)
    return db_wpqr

@app.put("/wpqr/{wpqr_id}", response_model=WPQR)
def update_wpqr(wpqr_id: int, wpqr_update: WPQRUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å WPQR"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    
    update_data = wpqr_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(wpqr, field, value)
    
    db.commit()
    db.refresh(wpqr)
    return wpqr

@app.delete("/wpqr/{wpqr_id}")
def delete_wpqr(wpqr_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å WPQR"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    
    wpqr_number = wpqr.wpqr_number
    db.delete(wpqr)
    db.commit()
    return {"message": f"WPQR '{wpqr_number}' deleted successfully", "deleted_id": wpqr_id}

@app.get("/wpqr/by-company/{company_id}")
def get_wpqr_by_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPQR –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    wpqr_list = db.query(WPQRModel).filter(WPQRModel.company_id == company_id).all()
    
    return {
        "company": {"id": company.id, "name": company.name, "code": company.code},
        "wpqr_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "test_date": w.test_date,
                "wps_id": w.wps_id
            } for w in wpqr_list
        ]
    }

@app.get("/wpqr/by-wps/{wps_id}")
def get_wpqr_by_wps(wps_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPQR –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if not wps:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    wpqr_list = db.query(WPQRModel).filter(WPQRModel.wps_id == wps_id).all()
    
    return {
        "wps": {"id": wps.id, "wps_number": wps.wps_number, "title": wps.title},
        "wpqr_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "test_date": w.test_date
            } for w in wpqr_list
        ]
    }

@app.get("/wpqr/search/{search_term}")
def search_wpqr(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ WPQR –ø–æ –Ω–æ–º–µ—Ä—É, —Å–≤–∞—Ä—â–∏–∫—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    wpqr_list = db.query(WPQRModel).filter(
        WPQRModel.wpqr_number.ilike(f"%{search_term}%") |
        WPQRModel.welder_name.ilike(f"%{search_term}%") |
        WPQRModel.overall_result.ilike(f"%{search_term}%")
    ).all()
    
    return {
        "search_term": search_term,
        "found_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "company_id": w.company_id,
                "wps_id": w.wps_id
            } for w in wpqr_list
        ]
    }

# =====================================
# SAMPLE DATA CREATION ENDPOINTS
# =====================================

@app.post("/companies/create-sample")
def create_sample_companies(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    sample_companies = [
        {
            "name": "–û–ê–û –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
            "code": "SEVERSTAL001",
            "address": "–≥. –ß–µ—Ä–µ–ø–æ–≤–µ—Ü, —É–ª. –ú–∏—Ä–∞, 30",
            "phone": "+7 (8202) 59-59-59",
            "email": "info@severstal.com",
            "certification_body": "–ù–ê–ö–°"
        },
        {
            "name": "–ü–ê–û –ì–∞–∑–ø—Ä–æ–º",
            "code": "GAZPROM001", 
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–∞–º—ë—Ç–∫–∏–Ω–∞, 16",
            "phone": "+7 (495) 719-30-01",
            "email": "gazprom@gazprom.ru",
            "certification_body": "–ù–ê–ö–°, Lloyd's Register"
        },
        {
            "name": "–û–û–û –°–≤–∞—Ä–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "code": "WELDTECH001",
            "address": "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –û–±—É—Ö–æ–≤—Å–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã, 120",
            "phone": "+7 (812) 555-12-34",
            "email": "office@weldtech.ru", 
            "certification_body": "–ù–ê–ö–°, T√úV"
        }
    ]
    
    created_companies = []
    for company_data in sample_companies:
        existing = db.query(CompanyModel).filter(CompanyModel.name == company_data["name"]).first()
        if not existing:
            db_company = CompanyModel(**company_data)
            db.add(db_company)
            created_companies.append(company_data["name"])
    
    try:
        db.commit()
        return {
            "message": "Sample companies created successfully",
            "created_count": len(created_companies),
            "created_companies": created_companies
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create companies: {str(e)}"}

@app.post("/wps/create-sample")
def create_sample_wps(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã WPS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    companies = db.query(CompanyModel).all()
    if not companies:
        return {"error": "No companies found. Create companies first using /companies/create-sample"}
    
    sample_wps = [
        {
            "company_id": companies[0].id,
            "wps_number": "WPS-GMAW-001",
            "revision": "1",
            "title": "–°–≤–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–æ–º –≤ —Å—Ä–µ–¥–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –≥–∞–∑–∞",
            "welding_process": "GMAW",
            "base_material_spec": "–ì–û–°–¢ 27772-2015",
            "base_material_grade": "09–ì2–°",
            "base_material_thickness_min": 3.0,
            "base_material_thickness_max": 20.0,
            "filler_material_spec": "–ì–û–°–¢ 2246-70",
            "filler_material_classification": "–°–≤-08–ì2–°",
            "filler_material_diameter": "1.2",
            "welding_positions": "PA,PB,PC",
            "joint_type": "BW",
            "current_type": "DC+",
            "current_range_min": 120,
            "current_range_max": 180,
            "voltage_range_min": 20.0,
            "voltage_range_max": 24.0,
            "shielding_gas_composition": "82% Ar + 18% CO2",
            "gas_flow_rate": 12.0,
            "status": "Active"
        },
        {
            "company_id": companies[0].id,
            "wps_number": "WPS-SMAW-001", 
            "revision": "2",
            "title": "–†—É—á–Ω–∞—è –¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç—ã–º–∏ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏",
            "welding_process": "SMAW",
            "base_material_spec": "–ì–û–°–¢ 27772-2015",
            "base_material_grade": "–°—Ç3—Å–ø",
            "base_material_thickness_min": 5.0,
            "base_material_thickness_max": 30.0,
            "filler_material_spec": "–ì–û–°–¢ 9466-75",
            "filler_material_classification": "–£–û–ù–ò-13/55",
            "filler_material_diameter": "4.0",
            "welding_positions": "PA,PB,PC,PF,PG",
            "joint_type": "BW", 
            "current_type": "DC+",
            "current_range_min": 140,
            "current_range_max": 180,
            "voltage_range_min": 22.0,
            "voltage_range_max": 26.0,
            "preheat_temp_min": 20,
            "preheat_temp_max": 100,
            "status": "Active"
        }
    ]
    
    if len(companies) > 1:
        sample_wps.append({
            "company_id": companies[1].id,
            "wps_number": "WPS-GTAW-001",
            "revision": "1", 
            "title": "–ê—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏",
            "welding_process": "GTAW",
            "base_material_spec": "–ì–û–°–¢ 5632-2014",
            "base_material_grade": "12–•18–ù10–¢",
            "base_material_thickness_min": 1.0,
            "base_material_thickness_max": 8.0,
            "filler_material_spec": "–ì–û–°–¢ 18143-72",
            "filler_material_classification": "–°–≤-04–•19–ù11–ú3",
            "filler_material_diameter": "2.0",
            "welding_positions": "PA,PB",
            "joint_type": "BW",
            "current_type": "DC-",
            "current_range_min": 80,
            "current_range_max": 120,
            "voltage_range_min": 10.0,
            "voltage_range_max": 14.0,
            "shielding_gas_composition": "100% Ar",
            "gas_flow_rate": 8.0,
            "status": "Draft"
        })
    
    created_wps = []
    for wps_data in sample_wps:
        existing = db.query(WPSModel).filter(
            WPSModel.company_id == wps_data["company_id"],
            WPSModel.wps_number == wps_data["wps_number"]
        ).first()
        if not existing:
            db_wps = WPSModel(**wps_data)
            db.add(db_wps)
            created_wps.append(wps_data["wps_number"])
    
    try:
        db.commit()
        return {
            "message": "Sample WPS created successfully",
            "created_count": len(created_wps),
            "created_wps": created_wps
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create WPS: {str(e)}"}

@app.post("/wpqr/create-sample")
def create_sample_wpqr(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã WPQR –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    companies = db.query(CompanyModel).all()
    wps_list = db.query(WPSModel).all()

    if not companies:
        return {"error": "No companies found. Create companies first using /companies/create-sample"}
    if not wps_list:
        return {"error": "No WPS found. Create WPS first using /wps/create-sample"}

    from datetime import datetime, timedelta

    sample_wpqr = [
        {
            "company_id": companies[0].id,
            "wps_id": wps_list[0].id,
            "wpqr_number": "WPQR-GMAW-001-2024",
            "test_date": datetime.now() - timedelta(days=30),
            "welder_name": "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–°–î-001-2024",
            "actual_base_material": "09–ì2–°",
            "base_metal_thickness": 10.0,
            "actual_filler_material": "–°–≤-08–ì2–°",
            "actual_welding_position": "PA",
            "actual_current": 150,
            "actual_voltage": 22.0,
            "actual_travel_speed": 25.0,
            "actual_heat_input": 1.32,
            "tensile_strength": 520.0,
            "tensile_result": "Pass",
            "bend_test_type": "Face",
            "bend_test_angle": 180,
            "bend_test_result": "Pass",
            "bend_test_notes": "–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            "impact_test_temp": 20,
            "impact_energy_weld": 85.0,
            "impact_result": "Pass",
            "macro_examination_result": "Pass",
            "macro_notes": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è",
            "ndt_method": "RT",
            "ndt_result": "Pass",
            "overall_result": "Qualified",
            "qualified_thickness_range": "3-20mm",
            "qualified_positions": "PA,PB,PC",
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –ü–µ—Ç—Ä–æ–≤ –ò.–ò.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Å–≤–∞—Ä—â–∏–∫ –°–∏–¥–æ—Ä–æ–≤ –°.–°.",
            "approved_date": datetime.now() - timedelta(days=25)
        },
        {
            "company_id": companies[0].id,
            "wps_id": wps_list[1].id if len(wps_list) > 1 else wps_list[0].id,
            "wpqr_number": "WPQR-SMAW-001-2024",
            "test_date": datetime.now() - timedelta(days=15),
            "welder_name": "–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–†–î-002-2024",
            "actual_base_material": "–°—Ç3—Å–ø",
            "base_metal_thickness": 15.0,
            "actual_filler_material": "–£–û–ù–ò-13/55",
            "actual_welding_position": "PB",
            "actual_current": 160,
            "actual_voltage": 24.0,
            "actual_travel_speed": 15.0,
            "actual_heat_input": 2.56,
            "tensile_strength": 480.0,
            "tensile_result": "Pass",
            "bend_test_type": "Root",
            "bend_test_angle": 180,
            "bend_test_result": "Pass",
            "bend_test_notes": "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ",
            "impact_test_temp": 0,
            "impact_energy_weld": 75.0,
            "impact_result": "Pass",
            "macro_examination_result": "Pass",
            "ndt_method": "UT",
            "ndt_result": "Pass",
            "overall_result": "Qualified",
            "qualified_thickness_range": "5-30mm",
            "qualified_positions": "PA,PB,PC,PF,PG",
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –ü–µ—Ç—Ä–æ–≤ –ò.–ò.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Å–≤–∞—Ä—â–∏–∫ –°–∏–¥–æ—Ä–æ–≤ –°.–°.",
            "approved_date": datetime.now() - timedelta(days=10)
        }
    ]

    if len(companies) > 1 and len(wps_list) > 2:
        sample_wpqr.append({
            "company_id": companies[1].id,
            "wps_id": wps_list[2].id,
            "wpqr_number": "WPQR-GTAW-001-2024",
            "test_date": datetime.now() - timedelta(days=5),
            "welder_name": "–í–∞—Å–∏–ª—å–µ–≤ –ò–≥–æ—Ä—å –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–ê–î-003-2024",
            "actual_base_material": "12–•18–ù10–¢",
            "base_metal_thickness": 6.0,
            "actual_filler_material": "–°–≤-04–•19–ù11–ú3",
            "actual_welding_position": "PA",
            "actual_current": 100,
            "actual_voltage": 12.0,
            "actual_travel_speed": 12.0,
            "actual_heat_input": 1.0,
            "tensile_strength": 580.0,
            "tensile_result": "Pass",
            "bend_test_type": "Side",
            "bend_test_angle": 180,
            "bend_test_result": "Pass",
            "bend_test_notes": "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞",
            "macro_examination_result": "Pass",
            "ndt_method": "PT",
            "ndt_result": "Pass",
            "overall_result": "Qualified",
            "qualified_thickness_range": "1-8mm",
            "qualified_positions": "PA,PB",
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –°–µ–º–µ–Ω–æ–≤ –°.–°.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥ –§–µ–¥–æ—Ä–æ–≤ –§.–§.",
            "approved_date": datetime.now() - timedelta(days=2)
        })

    created_wpqr = []
    for wpqr_data in sample_wpqr:
        existing = db.query(WPQRModel).filter(
            WPQRModel.company_id == wpqr_data["company_id"],
            WPQRModel.wpqr_number == wpqr_data["wpqr_number"]
        ).first()
        if not existing:
            db_wpqr = WPQRModel(**wpqr_data)
            db.add(db_wpqr)
            created_wpqr.append(wpqr_data["wpqr_number"])
    
    try:
        db.commit()
        return {
            "message": "Sample WPQR created successfully",
            "created_count": len(created_wpqr),
            "created_wpqr": created_wpqr
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create WPQR: {str(e)}"}

@app.get("/welders", response_model=List[Welder])
def get_welders(
    company_id: int = None, 
    status: str = None,
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–∞—Ä—â–∏–∫–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WelderModel)
    
    if company_id:
        query = query.filter(WelderModel.company_id == company_id)
    if status:
        query = query.filter(WelderModel.status.ilike(f"%{status}%"))
    
    welders = query.offset(skip).limit(limit).all()
    return welders

@app.get("/welders/{welder_id}", response_model=Welder)
def get_welder(welder_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–∞—Ä—â–∏–∫–∞ –ø–æ ID"""
    welder = db.query(WelderModel).filter(WelderModel.id == welder_id).first()
    if welder is None:
        raise HTTPException(status_code=404, detail="Welder not found")
    return welder

@app.post("/welders", response_model=Welder, status_code=status.HTTP_201_CREATED)
def create_welder(welder: WelderCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–≤–∞—Ä—â–∏–∫–∞"""
    company = db.query(CompanyModel).filter(CompanyModel.id == welder.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
    if welder.employee_number:
        existing_welder = db.query(WelderModel).filter(
            WelderModel.company_id == welder.company_id,
            WelderModel.employee_number == welder.employee_number
        ).first()
        if existing_welder:
            raise HTTPException(
                status_code=400, 
                detail=f"Employee number '{welder.employee_number}' already exists in company '{company.name}'"
            )
    
    db_welder = WelderModel(**welder.dict())
    db.add(db_welder)
    db.commit()
    db.refresh(db_welder)
    return db_welder

@app.put("/welders/{welder_id}", response_model=Welder)
def update_welder(welder_id: int, welder_update: WelderUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–≤–∞—Ä—â–∏–∫–∞"""
    welder = db.query(WelderModel).filter(WelderModel.id == welder_id).first()
    if welder is None:
        raise HTTPException(status_code=404, detail="Welder not found")
    
    update_data = welder_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(welder, field, value)
    
    db.commit()
    db.refresh(welder)
    return welder

@app.delete("/welders/{welder_id}")
def delete_welder(welder_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å —Å–≤–∞—Ä—â–∏–∫–∞"""
    welder = db.query(WelderModel).filter(WelderModel.id == welder_id).first()
    if welder is None:
        raise HTTPException(status_code=404, detail="Welder not found")
    
    welder_name = f"{welder.first_name} {welder.last_name}"
    db.delete(welder)
    db.commit()
    return {"message": f"Welder '{welder_name}' deleted successfully", "deleted_id": welder_id}

@app.get("/welders/by-company/{company_id}")
def get_welders_by_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–≤–∞—Ä—â–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    welders = db.query(WelderModel).filter(WelderModel.company_id == company_id).all()
    
    return {
        "company": {"id": company.id, "name": company.name, "code": company.code},
        "welders_count": len(welders),
        "welders": [
            {
                "id": w.id,
                "full_name": f"{w.first_name} {w.last_name}",
                "employee_number": w.employee_number,
                "phone": w.phone,
                "status": w.status,
                "certificates_count": len(w.certificates),
                "hire_date": w.hire_date
            } for w in welders
        ]
    }

# =====================================
# WELDER CERTIFICATES CRUD ENDPOINTS
# =====================================

@app.get("/certificates", response_model=List[WelderCertificate])
def get_certificates(
    welder_id: int = None,
    company_id: int = None,
    status: str = None,
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WelderCertificateModel)
    
    if welder_id:
        query = query.filter(WelderCertificateModel.welder_id == welder_id)
    if company_id:
        query = query.filter(WelderCertificateModel.company_id == company_id)
    if status:
        query = query.filter(WelderCertificateModel.status.ilike(f"%{status}%"))
    
    certificates = query.offset(skip).limit(limit).all()
    return certificates

@app.get("/certificates/{certificate_id}", response_model=WelderCertificate)
def get_certificate(certificate_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ ID"""
    certificate = db.query(WelderCertificateModel).filter(WelderCertificateModel.id == certificate_id).first()
    if certificate is None:
        raise HTTPException(status_code=404, detail="Certificate not found")
    return certificate

@app.post("/certificates", response_model=WelderCertificate, status_code=status.HTTP_201_CREATED)
def create_certificate(certificate: WelderCertificateCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    welder = db.query(WelderModel).filter(WelderModel.id == certificate.welder_id).first()
    if not welder:
        raise HTTPException(status_code=404, detail="Welder not found")
    
    company = db.query(CompanyModel).filter(CompanyModel.id == certificate.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –∫–æ–º–ø–∞–Ω–∏–∏
    existing_certificate = db.query(WelderCertificateModel).filter(
        WelderCertificateModel.company_id == certificate.company_id,
        WelderCertificateModel.certificate_number == certificate.certificate_number
    ).first()
    if existing_certificate:
        raise HTTPException(
            status_code=400, 
            detail=f"Certificate number '{certificate.certificate_number}' already exists in company '{company.name}'"
        )
    
    db_certificate = WelderCertificateModel(**certificate.dict())
    db.add(db_certificate)
    db.commit()
    db.refresh(db_certificate)
    return db_certificate

@app.put("/certificates/{certificate_id}", response_model=WelderCertificate)
def update_certificate(certificate_id: int, certificate_update: WelderCertificateUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    certificate = db.query(WelderCertificateModel).filter(WelderCertificateModel.id == certificate_id).first()
    if certificate is None:
        raise HTTPException(status_code=404, detail="Certificate not found")
    
    update_data = certificate_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(certificate, field, value)
    
    db.commit()
    db.refresh(certificate)
    return certificate

@app.delete("/certificates/{certificate_id}")
def delete_certificate(certificate_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""
    certificate = db.query(WelderCertificateModel).filter(WelderCertificateModel.id == certificate_id).first()
    if certificate is None:
        raise HTTPException(status_code=404, detail="Certificate not found")
    
    certificate_number = certificate.certificate_number
    db.delete(certificate)
    db.commit()
    return {"message": f"Certificate '{certificate_number}' deleted successfully", "deleted_id": certificate_id}

# =====================================
# CERTIFICATE FILE UPLOAD ENDPOINTS
# =====================================

@app.post("/certificates/{certificate_id}/upload-file")
async def upload_certificate_file(
    certificate_id: int,
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    certificate = db.query(WelderCertificateModel).filter(WelderCertificateModel.id == certificate_id).first()
    if not certificate:
        raise HTTPException(status_code=404, detail="Certificate not found")
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª (PDF, JPG, PNG)
    ALLOWED_EXTENSIONS = {".pdf", ".jpg", ".jpeg", ".png"}
    file_ext = Path(file.filename).suffix.lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
    MAX_FILE_SIZE = 10 * 1024 * 1024
    file.file.seek(0, 2)
    file_size = file.file.tell()
    file.file.seek(0)
    
    if file_size > MAX_FILE_SIZE:
        raise HTTPException(
            status_code=400,
            detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE // (1024*1024)}MB"
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    CERTIFICATES_DIR = Path("static") / "certificates"
    CERTIFICATES_DIR.mkdir(parents=True, exist_ok=True)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if certificate.certificate_file_url:
        old_file_path = Path("static") / certificate.certificate_file_url.replace("/static/", "")
        if old_file_path.exists():
            try:
                old_file_path.unlink()
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {old_file_path}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    import uuid
    filename = f"cert_{certificate_id}_{uuid.uuid4()}{file_ext}"
    file_path = CERTIFICATES_DIR / filename
    
    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"
        )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    certificate.certificate_file_url = f"/static/certificates/{filename}"
    db.commit()
    db.refresh(certificate)
    
    return {
        "message": "–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        "file_url": certificate.certificate_file_url,
        "filename": file.filename,
        "file_size": file_size
    }

# =====================================
# EXPIRING CERTIFICATES ENDPOINTS
# =====================================

@app.get("/companies/{company_id}/expiring-certificates", response_model=ExpiringCertificatesResponse)
def get_expiring_certificates(company_id: int, days_ahead: int = 60, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–µ–∫–∞—é—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏"""
    
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã, –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ days_ahead –¥–Ω–µ–π
    cutoff_date = date.today() + timedelta(days=days_ahead)
    
    certificates = db.query(WelderCertificateModel).join(WelderModel).filter(
        WelderCertificateModel.company_id == company_id,
        WelderCertificateModel.expiry_date <= cutoff_date,
        WelderCertificateModel.status == "Valid"
    ).all()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    critical = []  # < 30 –¥–Ω–µ–π
    urgent = []    # 30-60 –¥–Ω–µ–π  
    warning = []   # 60+ –¥–Ω–µ–π
    
    for cert in certificates:
        days_until_expiry = (cert.expiry_date - date.today()).days
        welder_name = f"{cert.welder.first_name} {cert.welder.last_name}"
        
        expiring_cert = ExpiringCertificate(
            certificate_id=cert.id,
            welder_name=welder_name,
            certificate_number=cert.certificate_number,
            welding_group=cert.welding_group,
            welding_method=cert.welding_method,
            expiry_date=cert.expiry_date,
            days_until_expiry=days_until_expiry,
            urgency_level="critical" if days_until_expiry < 30 else "urgent" if days_until_expiry < 60 else "warning"
        )
        
        if days_until_expiry < 0:
            critical.append(expiring_cert)  # –£–∂–µ –∏—Å—Ç–µ–∫
        elif days_until_expiry < 30:
            critical.append(expiring_cert)
        elif days_until_expiry < 60:
            urgent.append(expiring_cert)
        else:
            warning.append(expiring_cert)
    
    return ExpiringCertificatesResponse(
        company_id=company_id,
        company_name=company.name,
        total_expiring=len(certificates),
        critical=critical,
        urgent=urgent,
        warning=warning
    )

# =====================================
# SAMPLE DATA CREATION FOR WELDERS
# =====================================

@app.post("/welders/create-sample")
def create_sample_welders(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã —Å–≤–∞—Ä—â–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    companies = db.query(CompanyModel).all()
    if not companies:
        return {"error": "No companies found. Create companies first using /companies/create-sample"}
    
    from datetime import date, timedelta
    import random
    
    sample_welders = [
        {
            "company_id": companies[0].id,
            "first_name": "–ò–≤–∞–Ω",
            "last_name": "–ü–µ—Ç—Ä–æ–≤",
            "middle_name": "–°–µ—Ä–≥–µ–µ–≤–∏—á",
            "phone": "+7 (900) 123-45-67",
            "email": "i.petrov@example.com",
            "employee_number": "0001",
            "status": "Active",
            "hire_date": date.today() - timedelta(days=365)
        },
        {
            "company_id": companies[0].id,
            "first_name": "–ê–ª–µ–∫—Å–µ–π",
            "last_name": "–°–∏–¥–æ—Ä–æ–≤",
            "middle_name": "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "phone": "+7 (900) 234-56-78",
            "employee_number": "0002",
            "status": "Active",
            "hire_date": date.today() - timedelta(days=500)
        },
        {
            "company_id": companies[0].id,
            "first_name": "–ú–∏—Ö–∞–∏–ª",
            "last_name": "–ö–æ–∑–ª–æ–≤",
            "phone": "+7 (900) 345-67-89",
            "employee_number": "0003",
            "status": "Active"
        }
    ]
    
    if len(companies) > 1:
        sample_welders.extend([
            {
                "company_id": companies[1].id,
                "first_name": "–î–º–∏—Ç—Ä–∏–π",
                "last_name": "–í–∞—Å–∏–ª—å–µ–≤",
                "middle_name": "–ò–≥–æ—Ä–µ–≤–∏—á",
                "phone": "+7 (900) 456-78-90",
                "employee_number": "0001",
                "status": "Active"
            },
            {
                "company_id": companies[1].id,
                "first_name": "–°–µ—Ä–≥–µ–π",
                "last_name": "–§–µ–¥–æ—Ä–æ–≤",
                "phone": "+7 (900) 567-89-01",
                "employee_number": "0002",
                "status": "Active"
            }
        ])
    
    created_welders = []
    for welder_data in sample_welders:
        existing = db.query(WelderModel).filter(
            WelderModel.company_id == welder_data["company_id"],
            WelderModel.employee_number == welder_data["employee_number"]
        ).first()
        if not existing:
            db_welder = WelderModel(**welder_data)
            db.add(db_welder)
            created_welders.append(f"{welder_data['first_name']} {welder_data['last_name']}")
    
    try:
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑—Ü—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–≤–∞—Ä—â–∏–∫–æ–≤
        welders = db.query(WelderModel).all()
        created_certificates = []
        
        for welder in welders[-len(created_welders):]:  # –¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–∞—Ä—â–∏–∫–æ–≤
            # –°–æ–∑–¥–∞–µ–º 1-2 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ —Å–≤–∞—Ä—â–∏–∫–∞
            for i in range(random.randint(1, 2)):
                cert_data = {
                    "welder_id": welder.id,
                    "company_id": welder.company_id,
                    "certificate_number": f"–ù–ê–ö–°-{welder.employee_number}-{i+1}-2024",
                    "certification_body": "–ù–ê–ö–°" if i == 0 else random.choice(["–ù–ê–ö–°", "AWS", "T√úV"]),
                    "welding_group": random.choice(["–ê", "–ë", "–í", "–ì"]),
                    "welding_method": random.choice(["–†–î", "–ê–î", "–ü–ü", "–≠–®–°"]),
                    "welding_process": random.choice(["SMAW", "GMAW", "GTAW"]),
                    "base_material": random.choice(["–°—Ç–∞–ª—å —É–≥–ª–µ—Ä–æ–¥–∏—Å—Ç–∞—è", "–°—Ç–∞–ª—å –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è", "–ê–ª—é–º–∏–Ω–∏–π"]),
                    "thickness_range": random.choice(["3-12–º–º", "5-20–º–º", "8-25–º–º"]),
                    "welding_positions": random.choice(["PA,PB", "PA,PB,PC", "–í—Å–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è"]),
                    "issue_date": date.today() - timedelta(days=random.randint(30, 700)),
                    "expiry_date": date.today() + timedelta(days=random.randint(-30, 400)),  # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç
                    "status": "Valid"
                }
                
                db_cert = WelderCertificateModel(**cert_data)
                db.add(db_cert)
                created_certificates.append(cert_data["certificate_number"])
        
        db.commit()
        
        return {
            "message": "Sample welders and certificates created successfully",
            "created_welders_count": len(created_welders),
            "created_welders": created_welders,
            "created_certificates_count": len(created_certificates),
            "created_certificates": created_certificates
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create welders: {str(e)}"}
# =====================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# =====================================

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    return JSONResponse(
        status_code=500,
        content={"detail": f"Internal server error: {str(exc)}"}
    )

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)