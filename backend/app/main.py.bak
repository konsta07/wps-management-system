# backend/app/main.py - –í–∞—à –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from sqlalchemy import text
from typing import List
import uvicorn

from .database import get_db, create_tables
from .models import Company as CompanyModel, WPS as WPSModel, WPQR as WPQRModel
from .schemas import (
    Company, CompanyCreate, CompanyUpdate,
    WPS, WPSCreate, WPSUpdate,
    WPQR, WPQRCreate, WPQRUpdate
)

# PDF —Ä–æ—É—Ç–µ—Ä
from .services.pdf_generator import pdf_router

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    create_tables()
    print("‚úÖ Database tables created successfully")
except Exception as e:
    print(f"‚ö†Ô∏è Error creating tables: {e}")

app = FastAPI(
    title="WPS Management System",
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ —Å–≤–∞—Ä–∫–∏ (WPS) –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ (WPQR)",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ PDF —Ä–æ—É—Ç–µ—Ä–∞
app.include_router(pdf_router)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    create_tables()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üìÑ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:8000")
    print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")

# =====================================
# –ë–ê–ó–û–í–´–ï ENDPOINTS
# =====================================

@app.get("/")
async def root():
    return {
        "message": "WPS Management System API", 
        "version": "1.0.0",
        "docs": "/docs",
        "status": "Full CRUD operations available for Companies, WPS, and WPQR",
        "available_endpoints": {
            "companies": {
                "list": "GET /companies",
                "create": "POST /companies", 
                "get": "GET /companies/{id}",
                "update": "PUT /companies/{id}",
                "delete": "DELETE /companies/{id}",
                "search": "GET /companies/search/{term}",
                "filter": "GET /companies/filter",
                "create_sample": "POST /companies/create-sample"
            },
            "wps": {
                "list": "GET /wps",
                "create": "POST /wps",
                "get": "GET /wps/{id}",
                "update": "PUT /wps/{id}",
                "delete": "DELETE /wps/{id}",
                "by_company": "GET /wps/by-company/{company_id}",
                "search": "GET /wps/search/{term}",
                "create_sample": "POST /wps/create-sample"
            },
            "wpqr": {
                "list": "GET /wpqr",
                "create": "POST /wpqr",
                "get": "GET /wpqr/{id}",
                "update": "PUT /wpqr/{id}",
                "delete": "DELETE /wpqr/{id}",
                "by_company": "GET /wpqr/by-company/{company_id}",
                "by_wps": "GET /wpqr/by-wps/{wps_id}",
                "search": "GET /wpqr/search/{term}",
                "create_sample": "POST /wpqr/create-sample"
            },
            "pdf": {
                "wps_pdf": "GET /api/pdf/wps/{wps_id}",
                "wpqr_pdf": "GET /api/pdf/wpqr/{wpqr_id}"
            },
            "system": {
                "health": "GET /health",
                "test_db": "GET /test-db"
            }
        }
    }

@app.get("/health")
async def health_check(db: Session = Depends(get_db)):
    try:
        result = db.execute(text("SELECT 1")).scalar()
        return {"status": "healthy", "database": "connected", "test_query": result, "pdf_generator": "active"}
    except Exception as e:
        return {"status": "error", "database": "disconnected", "error": str(e)}

@app.get("/test-db")
async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from .database import engine
        
        with engine.connect() as conn:
            result = conn.execute(text("SELECT name FROM sqlite_master WHERE type='table';"))
            tables = [row[0] for row in result.fetchall()]
            
        return {
            "status": "success",
            "database_file": "wps_system.db",
            "tables_created": tables,
            "tables_count": len(tables)
        }
    except Exception as e:
        return {"status": "error", "error": str(e)}

# =====================================
# COMPANIES CRUD ENDPOINTS
# =====================================

@app.get("/companies", response_model=List[Company])
def get_companies(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    companies = db.query(CompanyModel).offset(skip).limit(limit).all()
    return companies

@app.get("/companies/{company_id}", response_model=Company)
def get_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ø–æ ID"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    return company

@app.post("/companies", response_model=Company, status_code=status.HTTP_201_CREATED)
def create_company(company: CompanyCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é"""
    existing_company = db.query(CompanyModel).filter(CompanyModel.company_code == company.company_code).first()
    if existing_company:
        raise HTTPException(
            status_code=400, 
            detail=f"Company with code '{company.company_code}' already exists"
        )
    
    db_company = CompanyModel(**company.dict())
    db.add(db_company)
    db.commit()
    db.refresh(db_company)
    return db_company

@app.put("/companies/{company_id}", response_model=Company)
def update_company(company_id: int, company_update: CompanyUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    
    update_data = company_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(company, field, value)
    
    db.commit()
    db.refresh(company)
    return company

@app.delete("/companies/{company_id}")
def delete_company(company_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if company is None:
        raise HTTPException(status_code=404, detail="Company not found")
    
    db.delete(company)
    db.commit()
    return {"message": f"Company '{company.name}' deleted successfully", "deleted_id": company_id}

@app.get("/companies/search/{search_term}")
def search_companies(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–¥—É (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)"""
    companies = db.query(CompanyModel).filter(
        CompanyModel.name.ilike(f"%{search_term}%") | 
        CompanyModel.name.ilike(f"%{search_term}%")
    ).all()
    
    return {
        "search_term": search_term,
        "search_mode": "case_insensitive",
        "found_count": len(companies),
        "companies": [
            {
                "id": c.id, 
                "name": c.name, 
                "company_code": c.company_code, 
                "email": c.email
            } for c in companies
        ]
    }

@app.get("/companies/filter")
def filter_companies(
    name: str = None, 
    code: str = None, 
    db: Session = Depends(get_db)
):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–π –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    query = db.query(CompanyModel)
    
    filters_applied = []
    
    if name:
        query = query.filter(CompanyModel.name.ilike(f"%{name}%"))
        filters_applied.append(f"name contains '{name}'")
        
    if code:
        query = query.filter(CompanyModel.company_code.ilike(f"%{code}%"))
        filters_applied.append(f"code contains '{code}'")
    
    companies = query.all()
    
    return {
        "filters_applied": filters_applied,
        "found_count": len(companies),
        "companies": [
            {
                "id": c.id,
                "name": c.name, 
                "company_code": c.company_code,
                "certification_body": c.certification_body
            } for c in companies
        ]
    }

# =====================================
# WPS CRUD ENDPOINTS
# =====================================

@app.get("/wps", response_model=List[WPS])
def get_wps_list(
    company_id: int = None, 
    status: str = None,
    welding_process: str = None,
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ WPS —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WPSModel)
    
    if company_id:
        query = query.filter(WPSModel.company_id == company_id)
    if status:
        query = query.filter(WPSModel.status.ilike(f"%{status}%"))
    if welding_process:
        query = query.filter(WPSModel.welding_process.ilike(f"%{welding_process}%"))
    
    wps_list = query.offset(skip).limit(limit).all()
    return wps_list

@app.get("/wps/{wps_id}", response_model=WPS)
def get_wps(wps_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å WPS –ø–æ ID"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    return wps

@app.post("/wps", response_model=WPS, status_code=status.HTTP_201_CREATED)
def create_wps(wps: WPSCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π WPS"""
    company = db.query(CompanyModel).filter(CompanyModel.id == wps.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    existing_wps = db.query(WPSModel).filter(
        WPSModel.company_id == wps.company_id,
        WPSModel.wps_number == wps.wps_number
    ).first()
    if existing_wps:
        raise HTTPException(
            status_code=400, 
            detail=f"WPS number '{wps.wps_number}' already exists for company '{company.name}'"
        )
    
    db_wps = WPSModel(**wps.dict())
    db.add(db_wps)
    db.commit()
    db.refresh(db_wps)
    return db_wps

@app.put("/wps/{wps_id}", response_model=WPS)
def update_wps(wps_id: int, wps_update: WPSUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    update_data = wps_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(wps, field, value)
    
    db.commit()
    db.refresh(wps)
    return wps

@app.delete("/wps/{wps_id}")
def delete_wps(wps_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if wps is None:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    wps_number = wps.wps_number
    db.delete(wps)
    db.commit()
    return {"message": f"WPS '{wps_number}' deleted successfully", "deleted_id": wps_id}

@app.get("/wps/by-company/{company_id}")
def get_wps_by_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPS –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    wps_list = db.query(WPSModel).filter(WPSModel.company_id == company_id).all()
    
    return {
        "company": {"id": company.id, "name": company.name, "company.code": company.company_code},
        "wps_count": len(wps_list),
        "wps_list": [
            {
                "id": w.id,
                "wps_number": w.wps_number,
                "title": w.title,
                "welding_process": w.welding_process,
                "status": w.status,
                "revision": w.revision
            } for w in wps_list
        ]
    }

@app.get("/wps/search/{search_term}")
def search_wps(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ WPS –ø–æ –Ω–æ–º–µ—Ä—É, –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—É —Å–≤–∞—Ä–∫–∏"""
    wps_list = db.query(WPSModel).filter(
        WPSModel.wps_number.ilike(f"%{search_term}%") |
        WPSModel.title.ilike(f"%{search_term}%") |
        WPSModel.welding_process.ilike(f"%{search_term}%") |
        WPSModel.base_material_spec.ilike(f"%{search_term}%")

    ).all()
    
    return {
        "search_term": search_term,
        "found_count": len(wps_list),
        "wps_list": [
            {
                "id": w.id,
                "wps_number": w.wps_number,
                "title": w.title,
                "welding_process": w.welding_process,
                "actual_base_material": w.base_material_spec,
                "status": w.status,
                "company_id": w.company_id
            } for w in wps_list
        ]
    }

# =====================================
# WPQR CRUD ENDPOINTS
# =====================================

@app.get("/wpqr", response_model=List[WPQR])
def get_wpqr_list(
    company_id: int = None, 
    wps_id: int = None,
    overall_result: str = None,
    skip: int = 0, 
    limit: int = 100, 
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ WPQR —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    query = db.query(WPQRModel)
    
    if company_id:
        query = query.filter(WPQRModel.company_id == company_id)
    if wps_id:
        query = query.filter(WPQRModel.wps_id == wps_id)
    if overall_result:
        query = query.filter(WPQRModel.overall_result.ilike(f"%{overall_result}%"))
    
    wpqr_list = query.offset(skip).limit(limit).all()
    return wpqr_list

@app.get("/wpqr/{wpqr_id}", response_model=WPQR)
def get_wpqr(wpqr_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å WPQR –ø–æ ID"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    return wpqr

@app.post("/wpqr", response_model=WPQR, status_code=status.HTTP_201_CREATED)
def create_wpqr(wpqr: WPQRCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π WPQR"""
    company = db.query(CompanyModel).filter(CompanyModel.id == wpqr.company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    if wpqr.wps_id:
        wps = db.query(WPSModel).filter(WPSModel.id == wpqr.wps_id).first()
        if not wps:
            raise HTTPException(status_code=404, detail="WPS not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ WPQR –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏
    existing_wpqr = db.query(WPQRModel).filter(
        WPQRModel.company_id == wpqr.company_id,
        WPQRModel.wpqr_number == wpqr.wpqr_number
    ).first()
    if existing_wpqr:
        raise HTTPException(
            status_code=400, 
            detail=f"WPQR number '{wpqr.wpqr_number}' already exists for company '{company.name}'"
        )
    
    db_wpqr = WPQRModel(**wpqr.dict())
    db.add(db_wpqr)
    db.commit()
    db.refresh(db_wpqr)
    return db_wpqr

@app.put("/wpqr/{wpqr_id}", response_model=WPQR)
def update_wpqr(wpqr_id: int, wpqr_update: WPQRUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å WPQR"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    
    update_data = wpqr_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(wpqr, field, value)
    
    db.commit()
    db.refresh(wpqr)
    return wpqr

@app.delete("/wpqr/{wpqr_id}")
def delete_wpqr(wpqr_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å WPQR"""
    wpqr = db.query(WPQRModel).filter(WPQRModel.id == wpqr_id).first()
    if wpqr is None:
        raise HTTPException(status_code=404, detail="WPQR not found")
    
    wpqr_number = wpqr.wpqr_number
    db.delete(wpqr)
    db.commit()
    return {"message": f"WPQR '{wpqr_number}' deleted successfully", "deleted_id": wpqr_id}

@app.get("/wpqr/by-company/{company_id}")
def get_wpqr_by_company(company_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPQR –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = db.query(CompanyModel).filter(CompanyModel.id == company_id).first()
    if not company:
        raise HTTPException(status_code=404, detail="Company not found")
    
    wpqr_list = db.query(WPQRModel).filter(WPQRModel.company_id == company_id).all()
    
    return {
        "company": {"id": company.id, "name": company.name, "company.code": company.company_code},
        "wpqr_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "test_date": w.test_date,
                "wps_id": w.wps_id
            } for w in wpqr_list
        ]
    }

@app.get("/wpqr/by-wps/{wps_id}")
def get_wpqr_by_wps(wps_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ WPQR –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WPS"""
    wps = db.query(WPSModel).filter(WPSModel.id == wps_id).first()
    if not wps:
        raise HTTPException(status_code=404, detail="WPS not found")
    
    wpqr_list = db.query(WPQRModel).filter(WPQRModel.wps_id == wps_id).all()
    
    return {
        "wps": {"id": wps.id, "wps_number": wps.wps_number, "title": wps.title},
        "wpqr_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "test_date": w.test_date
            } for w in wpqr_list
        ]
    }

@app.get("/wpqr/search/{search_term}")
def search_wpqr(search_term: str, db: Session = Depends(get_db)):
    """–ü–æ–∏—Å–∫ WPQR –ø–æ –Ω–æ–º–µ—Ä—É, —Å–≤–∞—Ä—â–∏–∫—É –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
    wpqr_list = db.query(WPQRModel).filter(
        WPQRModel.wpqr_number.ilike(f"%{search_term}%") |
        WPQRModel.welder_name.ilike(f"%{search_term}%") |
        WPQRModel.overall_result.ilike(f"%{search_term}%")
    ).all()
    
    return {
        "search_term": search_term,
        "found_count": len(wpqr_list),
        "wpqr_list": [
            {
                "id": w.id,
                "wpqr_number": w.wpqr_number,
                "welder_name": w.welder_name,
                "overall_result": w.overall_result,
                "company_id": w.company_id,
                "wps_id": w.wps_id
            } for w in wpqr_list
        ]
    }

# =====================================
# SAMPLE DATA CREATION ENDPOINTS
# =====================================

@app.post("/companies/create-sample")
def create_sample_companies(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    sample_companies = [
        {
            "name": "–û–ê–û –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å",
            "company_code": "SEVERSTAL001",
            "address": "–≥. –ß–µ—Ä–µ–ø–æ–≤–µ—Ü, —É–ª. –ú–∏—Ä–∞, 30",
            "phone": "+7 (8202) 59-59-59",
            "email": "info@severstal.com",
            "certification_body": "–ù–ê–ö–°"
        },
        {
            "name": "–ü–ê–û –ì–∞–∑–ø—Ä–æ–º",
            "company_code": "GAZPROM001", 
            "address": "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ù–∞–º—ë—Ç–∫–∏–Ω–∞, 16",
            "phone": "+7 (495) 719-30-01",
            "email": "gazprom@gazprom.ru",
            "certification_body": "–ù–ê–ö–°, Lloyd's Register"
        },
        {
            "name": "–û–û–û –°–≤–∞—Ä–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "company_code": "WELDTECH001",
            "address": "–≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –û–±—É—Ö–æ–≤—Å–∫–æ–π –æ–±–æ—Ä–æ–Ω—ã, 120",
            "phone": "+7 (812) 555-12-34",
            "email": "office@weldtech.ru", 
            "certification_body": "–ù–ê–ö–°, T√úV"
        }
    ]
    
    created_companies = []
    for company_data in sample_companies:
        existing = db.query(CompanyModel).filter(CompanyModel.name == company_data["name"]).first()
        if not existing:
            db_company = CompanyModel(**company_data)
            db.add(db_company)
            created_companies.append(company_data["name"])
    
    try:
        db.commit()
        return {
            "message": "Sample companies created successfully",
            "created_count": len(created_companies),
            "created_companies": created_companies
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create companies: {str(e)}"}

@app.post("/wps/create-sample")
def create_sample_wps(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã WPS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    companies = db.query(CompanyModel).all()
    if not companies:
        return {"error": "No companies found. Create companies first using /companies/create-sample"}
    
    sample_wps = [
        {
            "company_id": companies[0].id,
            "wps_number": "WPS-GMAW-001",
            "revision": "1",
            "title": "–°–≤–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–æ–º –≤ —Å—Ä–µ–¥–µ –∑–∞—â–∏—Ç–Ω–æ–≥–æ –≥–∞–∑–∞",
            "welding_process": "GMAW",
            "base_material_spec": "–ì–û–°–¢ 27772-2015",
            "base_material_grade": "09–ì2–°",
            "base_material_thickness_min": 3.0,
            "base_material_thickness_max": 20.0,
            "filler_material_spec": "–ì–û–°–¢ 2246-70",
            "filler_material_classification": "–°–≤-08–ì2–°",
            "filler_material_diameter": 1.2,
            "welding_positions": ["PA", "PB", "PC"],
            "joint_type": "BW",
            "current_type": "DC+",
            "amperage_range_min": 120,
            "amperage_range_max": 180,
            "voltage_range_min": 20.0,
            "voltage_range_max": 24.0,
            "shielding_gas_composition": "82% Ar + 18% CO2",
            "shielding_gas_flow_rate": 12.0,
            "status": "approved"
        },
        {
            "company_id": companies[0].id,
            "wps_number": "WPS-SMAW-001", 
            "revision": "2",
            "title": "–†—É—á–Ω–∞—è –¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç—ã–º–∏ —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏",
            "welding_process": "SMAW",
            "base_material_spec": "–ì–û–°–¢ 27772-2015",
            "base_material_grade": "–°—Ç3—Å–ø",
            "base_material_thickness_min": 5.0,
            "base_material_thickness_max": 30.0,
            "filler_material_spec": "–ì–û–°–¢ 9466-75",
            "filler_material_classification": "–£–û–ù–ò-13/55",
            "filler_material_diameter": 1.2,
            "welding_positions": ["PA", "PB", "PC", "PF", "PG"],
            "joint_type": "BW", 
            "current_type": "DC+",
            "amperage_range_min": 140,
            "amperage_range_max": 180,
            "voltage_range_min": 22.0,
            "voltage_range_max": 26.0,
            "preheat_temp_min": 20,
            "preheat_temp_max": 100,
            "status": "approved"
        }
    ]
    
    if len(companies) > 1:
        sample_wps.append({
            "company_id": companies[1].id,
            "wps_number": "WPS-GTAW-001",
            "revision": "1", 
            "title": "–ê—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏",
            "welding_process": "GTAW",
            "base_material_spec": "–ì–û–°–¢ 5632-2014",
            "base_material_grade": "12–•18–ù10–¢",
            "base_material_thickness_min": 1.0,
            "base_material_thickness_max": 8.0,
            "filler_material_spec": "–ì–û–°–¢ 18143-72",
            "filler_material_classification": "–°–≤-04–•19–ù11–ú3",
            "filler_material_diameter": 1.2,
            "welding_positions": ["PA", "PB"],
            "joint_type": "BW",
            "current_type": "DC-",
            "amperage_range_min": 80,
            "amperage_range_max": 120,
            "voltage_range_min": 10.0,
            "voltage_range_max": 14.0,
            "shielding_gas_composition": "100% Ar",
            "shielding_gas_flow_rate": 8.0,
            "status": "draft"
        })
    
    
    # --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–¥ –º–æ–¥–µ–ª—å WPS ---
    KEY_MAP = {
        "amperage_range_min": "current_range_min",
        "amperage_range_max": "current_range_max",
        "shielding_gas_flow_rate": "gas_flow_rate",
    }

    def normalize_wps_payload(d: dict) -> dict:
        out = {}
        for k, v in d.items():
            k2 = KEY_MAP.get(k, k)
            out[k2] = v
        # welding_positions: –º–∞—Å—Å–∏–≤ -> —Å—Ç—Ä–æ–∫–∞ "PA,PB,PC"
        if isinstance(out.get("welding_positions"), list):
            out["welding_positions"] = ",".join(out["welding_positions"])
        return out

    created_wps = []
    for wps_data in sample_wps:
        wps_data = normalize_wps_payload(wps_data)
        existing = db.query(WPSModel).filter(
            WPSModel.company_id == wps_data["company_id"],
            WPSModel.wps_number == wps_data["wps_number"]
        ).first()
        if not existing:
            db_wps = WPSModel(**wps_data)
            db.add(db_wps)
            created_wps.append(wps_data["wps_number"])
    
    try:
        db.commit()
        return {
            "message": "Sample WPS created successfully",
            "created_count": len(created_wps),
            "created_wps": created_wps
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create WPS: {str(e)}"}

@app.post("/wpqr/create-sample")
def create_sample_wpqr(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã WPQR –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    companies = db.query(CompanyModel).all()
    wps_list = db.query(WPSModel).all()

    if not companies:
        return {"error": "No companies found. Create companies first using /companies/create-sample"}
    if not wps_list:
        return {"error": "No WPS found. Create WPS first using /wps/create-sample"}

    from datetime import datetime, timedelta

    sample_wpqr = [
        {
            "company_id": companies[0].id,
            "wps_id": wps_list[0].id,
            "wpqr_number": "WPQR-GMAW-001-2024",
            "test_date": datetime.now() - timedelta(days=30),
            "welder_name": "–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–°–î-001-2024",
            "actual_base_material": "09–ì2–°",
            "base_metal_thickness": 10.0,
            "actual_filler_material": "–°–≤-08–ì2–°",
            "welding_process": "GMAW",                 # ‚Üê —ç—Ç–æ–≥–æ –ø–æ–ª—è –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏ ‚Äî —É–±–µ—Ä—ë–º –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            "actual_welding_position": "PA",
            "current_type": "DC+",
            "amperage_actual": 150,
            "voltage_actual": 22.0,
            "travel_speed_actual": 25.0,
            "heat_input": 1.32,
            "visual_inspection_result": "pass",
            "visual_inspection_notes": "–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            "tensile_test_result": "pass",
            "tensile_strength_mpa": 520.0,
            "elongation_percent": 22.0,
            "bend_test_result": "pass",
            "bend_test_type": "Face",
            "bend_test_angle": 180,
            "bend_test_notes": "–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
            "impact_test_result": "pass",
            "impact_test_temperature": 20,
            "impact_energy_j": 85.0,
            "overall_result": "pass",
            "valid_from": datetime.now() - timedelta(days=25),
            "valid_until": datetime.now() + timedelta(days=1095),
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –ü–µ—Ç—Ä–æ–≤ –ò.–ò.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Å–≤–∞—Ä—â–∏–∫ –°–∏–¥–æ—Ä–æ–≤ –°.–°.",
            "remarks": "–í—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ. WPQR –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."
        },
        {
            "company_id": companies[0].id,
            "wps_id": wps_list[1].id if len(wps_list) > 1 else wps_list[0].id,
            "wpqr_number": "WPQR-SMAW-001-2024",
            "test_date": datetime.now() - timedelta(days=15),
            "welder_name": "–ö–æ–∑–ª–æ–≤ –î–º–∏—Ç—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–†–î-002-2024",
            "actual_base_material": "–°—Ç3—Å–ø",
            "base_metal_thickness": 15.0,
            "actual_filler_material": "–£–û–ù–ò-13/55",
            "welding_process": "SMAW",
            "actual_welding_position": "PB",
            "current_type": "DC+",
            "amperage_actual": 160,
            "voltage_actual": 24.0,
            "travel_speed_actual": 15.0,
            "heat_input": 2.56,
            "visual_inspection_result": "pass",
            "tensile_test_result": "pass",
            "tensile_strength_mpa": 480.0,
            "elongation_percent": 25.0,
            "bend_test_result": "pass",
            "bend_test_type": "Root",
            "bend_test_angle": 180,
            "bend_test_notes": "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ",
            "impact_test_result": "pass",
            "impact_test_temperature": 0,
            "impact_energy_j": 75.0,
            "overall_result": "pass",
            "valid_from": datetime.now() - timedelta(days=10),
            "valid_until": datetime.now() + timedelta(days=1095),
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –ü–µ—Ç—Ä–æ–≤ –ò.–ò.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Å–≤–∞—Ä—â–∏–∫ –°–∏–¥–æ—Ä–æ–≤ –°.–°.",
            "remarks": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        }
    ]

    if len(companies) > 1 and len(wps_list) > 2:
        sample_wpqr.append({
            "company_id": companies[1].id,
            "wps_id": wps_list[2].id,
            "wpqr_number": "WPQR-GTAW-001-2024",
            "test_date": datetime.now() - timedelta(days=5),
            "welder_name": "–í–∞—Å–∏–ª—å–µ–≤ –ò–≥–æ—Ä—å –°–µ—Ä–≥–µ–µ–≤–∏—á",
            "welder_qualification": "–ù–ê–ö–°-–ê–î-003-2024",
            "actual_base_material": "12–•18–ù10–¢",
            "base_metal_thickness": 6.0,
            "actual_filler_material": "–°–≤-04–•19–ù11–ú3",
            "welding_process": "GTAW",
            "actual_welding_position": "PA",
            "current_type": "DC-",
            "amperage_actual": 100,
            "voltage_actual": 12.0,
            "travel_speed_actual": 12.0,
            "heat_input": 1.0,
            "visual_inspection_result": "pass",
            "tensile_test_result": "pass",
            "tensile_strength_mpa": 580.0,
            "elongation_percent": 35.0,
            "bend_test_result": "pass",
            "bend_test_type": "Side",
            "bend_test_angle": 180,
            "bend_test_notes": "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–∞—Ä–Ω–æ–≥–æ —à–≤–∞",
            "overall_result": "pass",
            "valid_from": datetime.now() - timedelta(days=2),
            "valid_until": datetime.now() + timedelta(days=1460),
            "tested_by": "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å–≤–∞—Ä–∫–µ –°–µ–º–µ–Ω–æ–≤ –°.–°.",
            "approved_by": "–ì–ª–∞–≤–Ω—ã–π —Ç–µ—Ö–Ω–æ–ª–æ–≥ –§–µ–¥–æ—Ä–æ–≤ –§.–§.",
            "remarks": "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –Ω–µ—Ä–∂–∞–≤–µ—é—â–∏—Ö —Å—Ç–∞–ª–µ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        })

    # --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –º–æ–¥–µ–ª—å WPQR ---
    model_cols = set(c.name for c in WPQRModel.__table__.columns)

    KEY_MAP = {
        # –µ—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–ª—è ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –Ω—É–∂–Ω—ã–µ:
        "actual_base_material": "actual_base_material",     # –∏–ª–∏ "base_material"
        "actual_filler_material": "actual_filler_material", # –∏–ª–∏ "filler_material"
        "actual_welding_position": "actual_welding_position",  # –∏–ª–∏ "welding_position"
        "impact_energy_j": "impact_energy",  # –µ—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ impact_energy, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –Ω–∏–∂–µ
        # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –≤ –º–æ–¥–µ–ª–∏ –Ω–µ—Ç ‚Äî —É–¥–∞–ª—è–µ–º:
        "welding_process": None,
    }

    def normalize_wpqr_payload(d: dict) -> dict:
        out = {}
        for k, v in d.items():
            k2 = KEY_MAP.get(k, k)
            if k2 is None:
                continue
            out[k2] = v
        # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤ –º–æ–¥–µ–ª–∏ –∫–æ–ª–æ–Ω–∫–∏
        out = {k: v for k, v in out.items() if k in model_cols}
        return out

    created_wpqr = []
    for wpqr_data in sample_wpqr:
        wpqr_data = normalize_wpqr_payload(wpqr_data)

        existing = db.query(WPQRModel).filter(
            WPQRModel.company_id == wpqr_data["company_id"],
            WPQRModel.wpqr_number == wpqr_data["wpqr_number"]
        ).first()

        if not existing:
            db_wpqr = WPQRModel(**wpqr_data)
            db.add(db_wpqr)
            created_wpqr.append(wpqr_data["wpqr_number"])

    try:
        db.commit()
        return {
            "message": "Sample WPQR created successfully",
            "created_count": len(created_wpqr),
            "created_wpqr": created_wpqr
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create WPQR: {str(e)}"}

    
    created_wpqr = []
    for wpqr_data in sample_wpqr:
        existing = db.query(WPQRModel).filter(
            WPQRModel.company_id == wpqr_data["company_id"],
            WPQRModel.wpqr_number == wpqr_data["wpqr_number"]
        ).first()
        if not existing:
            db_wpqr = WPQRModel(**wpqr_data)
            db.add(db_wpqr)
            created_wpqr.append(wpqr_data["wpqr_number"])
    
    try:
        db.commit()
        return {
            "message": "Sample WPQR created successfully",
            "created_count": len(created_wpqr),
            "created_wpqr": created_wpqr
        }
    except Exception as e:
        db.rollback()
        return {"error": f"Failed to create WPQR: {str(e)}"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    return JSONResponse(
        status_code=500,
        content={"detail": f"Internal server error: {str(exc)}"}
    )

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)